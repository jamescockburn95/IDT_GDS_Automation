import shapely as sp
import gdsfactory as gf
from gdsfactory.generic_tech import get_generic_pdk

##### to do #####

#define variables for layers so that there is dose >1 in the GDS.
#find a way of flattening the hierarchy to make it easier to look at in voyager software.
#focussing IDTs obviously.
#Use a grid system for aligning all sweep components rather than the manual way I'm doing it now.
#change all 1,0 layers to 1,1000 so they get a base dose in voyager software

###################
# you only have to worry about these if they aren't defined in the loop at the bottom

####################
#general gds properties

originx = 0
originy = 0

###################################
#RF Probe pad dims

pad_width = 60
pad_height = 100
pad_layer = (1,0)
pad_separation = 20
#probe_separation = 
rounded_pads = True
corner_radius = 10

###################################
#IDT properties

arm_width = 15 #width of arm between pad and IDT

#note: buggy for electrode length > 110
electrode_length = 60
electrode_width = 0.25
electrode_number = 400
electrode_separation = 0.25
electrode_end_margin = 10

idt_angle = 0

###################################
#waveguide_taper_properties

wg_width = 0.350
wg_length = 10
taper_length = 100
transmission_separation = wg_length*2 + taper_length*2


def straight_idt(electrode_number,originx,originy,taper_length):
    
    #calculate some distances
    idt_total_width = (electrode_number*electrode_width) + ((electrode_separation*electrode_number)-electrode_separation)
    idt_separation = electrode_length + (electrode_end_margin)
    
    # Create a blank component (essentially an empty GDS cell with some special features)
    c = gf.Component("Flat_IDTs")
    t = gf.Component("Text")

    
    mirror_centre = originx + pad_width + 1.5*max_idt_width + (wg_length/2) + end_taper_length
    idt_centre = originy + pad_height + pad_separation*0.5
    

    #####################################################
    #          Add Pads  + ports                        #
    #####################################################

    pad1 = c.add_polygon(
        [(originx, originx, originx+pad_width, originx+pad_width), (originy, originy+pad_height, originy+pad_height, originy)], layer=1
    )
    
    pad2 = c.add_polygon(
        [(originx, originx, originx+pad_width, originx+pad_width), (originy + pad_height + pad_separation, originy+pad_height + pad_height + pad_separation, originy+pad_height + pad_height + pad_separation, originy + pad_height + pad_separation)], layer=1
    )
    
    y_port_low_pad = originy + arm_width/2
    x_port_low_pad = originx + pad_width
    
    y_port_top_pad = originy + pad_height + pad_separation + pad_height -(arm_width/2)
    x_port_top_pad = originx + pad_width
    
    c.add_port(name = "pad_1_port",center = [x_port_low_pad,y_port_low_pad], width = arm_width, orientation = 0, layer = (1,0))
    c.add_port(name = "pad_2_port",center = [x_port_top_pad,y_port_top_pad], width = arm_width, orientation = 0, layer = (1,0))
    

    
    #####################################################
    #          add waveguide + ports                    #
    #####################################################
    
    c.add_port(name = "wg_port",center = [mirror_centre,idt_centre], width = wg_width, orientation = 180, layer = (2,0))
    waveguide = c << gf.components.rectangle(size = (wg_width,wg_length/2), layer=(2, 0))
    waveguide.connect("e2", destination = c["wg_port"])
    
    #####################################################
    #          add taper and ports                      #
    #####################################################    
    
    taper_start_x = mirror_centre-wg_length/2 - taper_length
    taper_start_y = idt_centre
    taper_end_x = mirror_centre-wg_length/2
    taper_end_y = idt_centre
    
    c.add_port(name = "taper_start", center = [taper_start_x,taper_start_y], width = idt_separation,orientation = 0, layer = (2,0))
    taper = c << gf.components.taper(length=taper_length, width1=idt_separation, width2=wg_width, layer=(2, 0))
    taper.connect("o1", destination = c["taper_start"])
    
    #####################################################
    #          add idt bus and electrodes               #
    ##################################################### 
    
    #idt bus will start with upper right point and work clockwise around polygon
    
    bus_origin_bottom = (taper_start_x, idt_centre + idt_separation/2 + arm_width) #start point for common for all bottom IDT electrodes
    bus_p2_bottom = (taper_start_x, idt_centre + idt_separation/2)
    bus_p3_bottom = (taper_start_x-idt_total_width, idt_centre + idt_separation/2)
    bus_p4_bottom =  (taper_start_x-idt_total_width, idt_centre + idt_separation/2 + arm_width)
    
    
    y_port_low_bus = idt_centre - idt_separation/2 - arm_width
    x_port_low_bus = taper_start_x - (idt_total_width/2)
          
    c.add_port(name = "lower_idt_port",center = [x_port_low_bus,y_port_low_bus], width = arm_width, orientation = 270, layer = (1,0))
    
    bus_origin_top = (taper_start_x, idt_centre - idt_separation/2)
    bus_p2_top = (taper_start_x, idt_centre - idt_separation/2 - arm_width)
    bus_p3_top = (taper_start_x-idt_total_width, idt_centre - idt_separation/2 - arm_width)
    bus_p4_top =  (taper_start_x-idt_total_width, idt_centre - idt_separation/2)
    
    y_port_top_bus = idt_centre + idt_separation/2 + arm_width
    x_port_top_bus = x_port_low_bus
    
    c.add_port(name = "upper_idt_port",center = [x_port_top_bus,y_port_top_bus], width = arm_width, orientation = 90, layer = (1,0))
        
    idt_bus_bottom = c.add_polygon([bus_origin_bottom,bus_p2_bottom,bus_p3_bottom,bus_p4_bottom],layer=(1,0))
    idt_bus_top = c.add_polygon([bus_origin_top,bus_p2_top,bus_p3_top,bus_p4_top],layer=(1,0))
    
    #### electrodes ####
    
# Loop to create the 2D array of rectangles (for electrodes)

    electrodes = []

    for i in range(electrode_number):
        # Calculate x-coordinate for the current electrode
        x1 = taper_start_x-idt_total_width +((i)*(electrode_width+electrode_separation))
        x2 = x1 + electrode_width
        y1 = idt_centre - idt_separation/2
        y2 = y1 + electrode_length
        
        # Check if the current electrode should be offset
        if i % 2 == 1:
            y1 += electrode_end_margin  # Offset for every second electrode
            y2 += electrode_end_margin
        
        electrode_i = c.add_polygon([(x1,y1),(x1,y2),(x2,y2),(x2,y1)],layer = (1,0))
        electrodes.append(electrode_i)
        
    
    #####################################################
    #          connect pad to bus                      #
    ##################################################### 
    
    #don't like the way this is done really but will do for now.
    
    route = gf.routing.get_route(c.ports["pad_1_port"],c.ports["lower_idt_port"],width = arm_width)
    c.add(route.references)
    
    route = gf.routing.get_route(c.ports["pad_2_port"],c.ports["upper_idt_port"],width = arm_width)
    c.add(route.references)
    
    #####################################################
    #          create bounding box etch mask           #
    ##################################################### 
   
   #start bottom left and go clockwise
   
    buffer_amount = 1
    extra_y_buff = 0
    extra_x_buff= 0
    
    b_box_1 = sp.Polygon([(originx - buffer_amount,originy-buffer_amount),
                       (originx - buffer_amount,originy + pad_height*2 + pad_separation + buffer_amount),
                       (x_port_top_bus + (arm_width/2) + buffer_amount,y_port_top_pad + (arm_width/2) + buffer_amount),
                       (x_port_top_bus + (arm_width/2) + buffer_amount,y_port_top_bus + buffer_amount),
                       (taper_start_x + buffer_amount,y_port_top_bus + buffer_amount),
                       (taper_start_x + buffer_amount,y_port_low_bus - buffer_amount),
                       (x_port_low_bus+(arm_width/2)+buffer_amount,y_port_low_bus - buffer_amount),
                       (x_port_low_bus+(arm_width/2)+buffer_amount,originy-buffer_amount),
                       (originx - buffer_amount,originy-buffer_amount)])
    
    b_box_2 = sp.Polygon([(x_port_low_pad + buffer_amount,y_port_low_pad + (arm_width/2)+ buffer_amount),
                          (x_port_top_pad + buffer_amount,y_port_top_pad - (arm_width/2)- buffer_amount),
                          (x_port_top_bus - (arm_width/2) - buffer_amount - extra_x_buff,y_port_top_pad - (arm_width/2) - buffer_amount - extra_y_buff),
                          (x_port_top_bus - (arm_width/2) - buffer_amount,y_port_top_bus+buffer_amount),
                          (x_port_top_bus-(idt_total_width/2)-buffer_amount,y_port_top_bus+buffer_amount),
                          (x_port_top_bus-(idt_total_width/2)-buffer_amount,y_port_low_bus-buffer_amount),
                          (x_port_low_bus-(arm_width/2)-buffer_amount,y_port_low_bus-buffer_amount),
                          (x_port_low_bus-(arm_width/2)-buffer_amount - extra_x_buff,y_port_low_pad + (arm_width/2)+ buffer_amount + extra_y_buff),
                          (x_port_low_pad + buffer_amount,y_port_low_pad + (arm_width/2)+ buffer_amount)])

    fin_b_box = b_box_1-b_box_2
    
    c.add_polygon(fin_b_box, layer = (3,0))
    
    #####################################################
    #         take current structure and mirror        #
    ##################################################### 
    
    c_copy = gf.Component("copy of c")
    idt_copy = c_copy.add_ref(c)
    idt1_ref = c_copy.add_ref(c)
    idt1_ref.mirror(p1 = (mirror_centre, idt_centre-4), p2 = (mirror_centre, idt_centre+4))
    
    #####################################################
    #         add text labels                           #
    ##################################################### 
   
    
    text = f"Elec num = {electrode_number}\nTaper l = {taper_length}\nGuide l = {wg_length}\nElec w = {electrode_width}\nElec gap = {electrode_separation}"
    
    # Create a text element
    label = c_copy << gf.components.text(
        text=text,
        size=5,
        position=[originx - 5, originy - 5],
        justify='right',
        layer='WG'
    )
    

    
    return c_copy, idt_total_width



# Define the range and number of steps
#must be whole number of electrodes / taper lengths in each iteration!! ELse will get final_origin errors
#to not sweep just set the start and end electrode number to be the same

start_electrode_number = 100
end_electrode_number = 150
num_steps = 12

start_taper_length = 20
end_taper_length = 50
num_taper_steps = 8

# start_wg_length = 10
# end_wg_length = 10
# num_wg_steps = 10


# Calculate the step size
step_size = (end_electrode_number - start_electrode_number) / (num_steps - 1)
step_size_taper = (end_taper_length- start_taper_length) / (num_taper_steps - 1)

# Create a parent component to contain all the iterations
parent_component = gf.Component("All_Electrode_Iterations")

max_idt_width = (end_electrode_number*electrode_width) + ((electrode_separation*end_electrode_number)-electrode_separation)

if start_electrode_number != end_electrode_number and start_taper_length != end_taper_length:

    
    # Iterate over the range of electrode numbers
    for counter,electrode_number in enumerate(range(start_electrode_number, end_electrode_number + 1, int(step_size))):
     
        total_iterations = (end_electrode_number - start_electrode_number) // step_size + 1

                
        
        if counter == 0:    
            initialx = originx
        
        if counter % 4 == 0:
            originy = originy +pad_height+(pad_separation*2)+pad_height
            originx = initialx
            
        component, idt_total_width = straight_idt(electrode_number=electrode_number,originx=originx,originy=originy, taper_length = 50)
        parent_component << component
        

        
        #arrayed cells are separated by pad separation
        
         
        originx = originx + ((pad_width*2 + (4*max_idt_width) + transmission_separation + 70))
        
        if counter == total_iterations - 1:
            final_origin_y = originy
            final_origin_x = originx
        
    for counter_length, taper_length in enumerate(range(start_taper_length, end_taper_length + 1, int(step_size_taper))):
      
        total_iterations = (end_taper_length - start_taper_length) // step_size_taper + 1

        
        if counter_length == 0:    
            originx = initialx
            originy = final_origin_y + +pad_height+(pad_separation*2)+pad_height
        
        if counter_length % 4 == 0:
            originy = originy +pad_height+(pad_separation*2)+pad_height
            originx = initialx
            
        component, idt_total_width = straight_idt(taper_length = taper_length,originx=originx,originy=originy, electrode_number = end_electrode_number)
        parent_component << component
    
        
        
        #arrayed cells are separated by pad separation
        
         
        originx = originx + ((pad_width*2 + (4*max_idt_width) + transmission_separation + 70))

        if counter_length == total_iterations - 1:
            final_origin_y = originy
            final_origin_x = originx  

if start_electrode_number == end_electrode_number:
           
        
    for counter_length, taper_length in enumerate(range(start_taper_length, end_taper_length + 1, int(step_size_taper))):
        
        total_iterations = (end_taper_length - start_taper_length) // step_size_taper + 1  

        if counter_length == 0:    
             initialx = originx
             #originy = final_origin_y + +pad_height+(pad_separation*2)+pad_height
        
        if counter_length % 4 == 0:
            originy = originy +pad_height+(pad_separation*2)+pad_height
            originx = initialx
            
        component, idt_total_width = straight_idt(taper_length = taper_length,originx=originx,originy=originy, electrode_number = end_electrode_number)
        parent_component << component
    
        
        #arrayed cells are separated by pad separation
        
         
        originx = originx + ((pad_width*2 + (4*max_idt_width) + transmission_separation + 100))

        if counter_length == total_iterations - 1:
            final_origin_y = originy
            final_origin_x = originx      

if start_taper_length == end_taper_length:
           
        
    # Iterate over the range of electrode numbers
    for counter,electrode_number in enumerate(range(start_electrode_number, end_electrode_number + 1, int(step_size))):
     
        total_iterations = (end_electrode_number - start_electrode_number) // step_size + 1
       
        
        if counter == 0:    
            initialx = originx
        
        if counter % 4 == 0:
            originy = originy +pad_height+(pad_separation*2)+pad_height
            originx = initialx
            
        component, idt_total_width = straight_idt(electrode_number=electrode_number,originx=originx,originy=originy, taper_length = end_taper_length)
        parent_component << component
        print(component)
        
        #arrayed cells are separated by pad separation
        
         
        originx = originx + ((pad_width*2 + (4*max_idt_width) + transmission_separation + 70))

        if counter == total_iterations - 1:
            final_origin_y = originy
            final_origin_x = originx  

    #####################################################
    #          add alignment marker 1                   #
    #####################################################    

alignment_1 = gf.Component("alignment_1")
alignment_2 = gf.Component("alignment_2")  

align_component = gf.Component("all alignment")
align_component2 = gf.Component("alignment marker 2")
   
corner_1 = alignment_2.add_ref(gf.components.L(width=0.5, size=[1, 1], layer=(1,0)))
corner_1.move(destination = (-335,-335))
corner_2 = alignment_2.add_ref(gf.components.L(width=1, size=[3, 3], layer=(1,0)))
corner_2.move(destination = (-340,-340)) 
corner_3 = alignment_2.add_ref(gf.components.L(width=2, size=[6, 6], layer=(1,0)))
corner_3.move(destination = (-348,-348)) 
corner_4 = alignment_2.add_ref(gf.components.L(width=2, size=[12, 12], layer=(1,0)))
corner_4.move(destination = (-360,-360))  
corner_5 = alignment_2.add_ref(gf.components.L(width=2, size=[24, 24], layer=(1,0)))
corner_5.move(destination = (-380,-380))  
corner_6 = alignment_2.add_ref(gf.components.L(width=2, size=[50, 50], layer=(1,0)))
corner_6.move(destination = (-450,-450)) 
corner_7 = alignment_2.add_ref(gf.components.L(width=2, size=[100, 100], layer=(1,0)))
corner_7.move(destination = (-550,-550))  
    
mirror1 = alignment_2.mirror(p1 = (-330,-80), p2 = (-330,-580))
mirror2 = mirror1.mirror(p1 = (-580,-330), p2 = (-80,-330))
mirror3 = mirror2.mirror(p1 = (-330,-80), p2 = (-330,-580))
    
align_bbox = alignment_2.add_polygon(points = [(- 80, -80),(-80,-80-500),(-80-500,-80-500),(-80-500,-80)], layer = (3,0))
cross = alignment_2.add_ref(gf.components.align_wafer(width=0.2, spacing=1.5, cross_length=3, layer=(1,0), square_corner='bottom_left'))
cross.move(destination = (-330,-330))
align_component << alignment_1
align_component << alignment_2
align_component << mirror1
align_component << mirror2
align_component << mirror3
component << alignment_1
component << alignment_2
component << mirror1
component << mirror2
component << mirror3

marker_2_ref = align_component2.add_ref(align_component.copy())
marker_2_ref.move(destination = (final_origin_x + 330,final_origin_y + pad_height*3 + pad_separation*4 + 530))
marker_3_ref = align_component2.add_ref(align_component.copy())
marker_3_ref.move(destination =(final_origin_x + 330,0))
marker_4_ref = align_component2.add_ref(align_component.copy())
marker_4_ref.move(destination =(0, final_origin_y + pad_height*3 + pad_separation*4 + 530))
component << align_component2               

extraction = parent_component.extract
           
# Write the parent component to a single GDS file
parent_component.write_gds("all_electrode_iterations.gds")
align_component.write_gds("Alignment markers")
parent_component.show()
align_component.show()


